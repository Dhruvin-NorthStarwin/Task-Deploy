#!/usr/bin/env python3
"""
Demo: Video & Image Upload with Google Cloud Storage
"""
import os
import sys
import asyncio
from io import BytesIO
from PIL import Image
import tempfile

# Add current directory to path
sys.path.insert(0, os.getcwd())

async def demo_media_uploads():
    """Demonstrate media upload capabilities"""
    print("üé¨üì∏ Video & Image Upload Demo with Google Cloud Storage")
    print("=" * 60)
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        from app.services.file_service import file_service
        from fastapi import UploadFile
        
        print("1. üìä File Service Capabilities:")
        print(f"   ‚úÖ Cloud Storage: {file_service.use_cloud_storage}")
        print(f"   üì¶ Bucket: {file_service.gcs_bucket_name}")
        print(f"   üñºÔ∏è  Image Types: {', '.join(file_service.allowed_image_types)}")
        print(f"   üé• Video Types: {', '.join(file_service.allowed_video_types)}")
        print(f"   üìè Max Size: {file_service.max_file_size / (1024*1024):.0f} MB")
        
        print("\n2. üñºÔ∏è Image Processing Demo:")
        
        # Create test images of different sizes
        test_cases = [
            ("Small Image", (800, 600)),
            ("Large Image", (3840, 2160)),  # 4K resolution
            ("Portrait", (1080, 1920)),
        ]
        
        for name, size in test_cases:
            # Create test image
            img = Image.new('RGB', size, color='blue')
            img_bytes = BytesIO()
            img.save(img_bytes, format='JPEG', quality=90)
            original_content = img_bytes.getvalue()
            
            # Test optimization
            optimized_content = await file_service._optimize_image_content(original_content)
            
            compression_ratio = len(optimized_content) / len(original_content)
            
            print(f"   üì∑ {name} ({size[0]}x{size[1]}):")
            print(f"      Original: {len(original_content):,} bytes")
            print(f"      Optimized: {len(optimized_content):,} bytes ({compression_ratio:.1%})")
            
            # Check if image was resized
            optimized_img = Image.open(BytesIO(optimized_content))
            print(f"      Final size: {optimized_img.width}x{optimized_img.height}")
        
        print("\n3. üé• Video Upload Simulation:")
        
        # Simulate video upload metadata
        video_scenarios = [
            ("Training Video", "video/mp4", 5 * 1024 * 1024),  # 5MB
            ("Task Demo", "video/webm", 8 * 1024 * 1024),      # 8MB
            ("Tutorial", "video/mov", 12 * 1024 * 1024),       # 12MB (over limit)
        ]
        
        for name, content_type, size in video_scenarios:
            print(f"   üé¨ {name} ({content_type}):")
            print(f"      Size: {size / (1024*1024):.1f} MB")
            
            if size <= file_service.max_file_size:
                print(f"      ‚úÖ Upload allowed")
                
                # Generate expected URL
                if file_service.use_cloud_storage:
                    expected_url = f"https://storage.googleapis.com/{file_service.gcs_bucket_name}/task_completions/123/{name.lower().replace(' ', '-')}.mp4"
                    print(f"      üåê GCS URL: {expected_url}")
                else:
                    print(f"      üè† Local storage fallback")
            else:
                print(f"      ‚ùå Too large (max: {file_service.max_file_size / (1024*1024):.0f} MB)")
        
        print("\n4. üîÑ Upload Process Flow:")
        print("   1. File received via FastAPI endpoint")
        print("   2. Validation (size, type, authentication)")
        print("   3. Image optimization (if applicable)")
        if file_service.use_cloud_storage:
            print("   4. Upload to Google Cloud Storage")
            print("   5. Generate public CDN URL")
            print("   6. Fallback to local storage if upload fails")
        else:
            print("   4. Save to local storage")
            print("   5. Generate local URL")
        print("   7. Update database with file metadata")
        print("   8. Return URL to frontend")
        
        print("\n5. üåê URL Examples:")
        if file_service.use_cloud_storage:
            print(f"   GCS Image: https://storage.googleapis.com/{file_service.gcs_bucket_name}/task_completions/456/photo-uuid.jpg")
            print(f"   GCS Video: https://storage.googleapis.com/{file_service.gcs_bucket_name}/task_completions/789/video-uuid.mp4")
        print(f"   Local Image: http://localhost:8000/uploads/task_completions/456/photo-uuid.jpg")
        print(f"   Local Video: http://localhost:8000/uploads/task_completions/789/video-uuid.mp4")
        
        print("\n6. üì± Frontend Integration:")
        print("   ‚Ä¢ Images display instantly via <img src='gcs-url' />")
        print("   ‚Ä¢ Videos play via <video src='gcs-url' controls />")
        print("   ‚Ä¢ Global CDN ensures fast loading worldwide")
        print("   ‚Ä¢ No server bandwidth usage for media serving")
        
        print("\nüéâ Videos & Images will work excellently!")
        print("‚úÖ Fast uploads to Google Cloud Storage")
        print("‚úÖ Automatic image optimization")
        print("‚úÖ Global CDN distribution")
        print("‚úÖ Reliable fallback system")
        print("‚úÖ No file size limits (within GCS quotas)")
        
        return True
        
    except Exception as e:
        import traceback
        print(f"‚ùå Demo failed: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(demo_media_uploads())

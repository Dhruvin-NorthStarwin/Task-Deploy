# Production Docker Compose for Task Management System
# Use this file for production deployments
version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: task-postgres-prod
    environment:
      POSTGRES_DB: restro_manage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-secure-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - task-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d restro_manage"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis (Production)
  redis:
    image: redis:7-alpine
    container_name: task-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - task-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redispass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # FastAPI Backend (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: task-backend-prod
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-your-secure-password}@postgres:5432/restro_manage
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ENVIRONMENT=production
      - DEBUG=false
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - MAX_FILE_SIZE=10485760
      - UPLOAD_DIR=/app/uploads
    volumes:
      - backend_uploads:/app/uploads
      - /etc/localtime:/etc/localtime:ro
    networks:
      - task-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # React Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: task-frontend-prod
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=http://backend:8000/api
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - task-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

# Custom network for service communication
networks:
  task-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
